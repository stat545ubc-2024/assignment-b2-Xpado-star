?weighted_median
#'   functions and for its clear meaning (remove NA).
#'
#' @return A single numeric value representing the weighted median.
#'
#' @examples
#' weighted_median(c(1, 2, 3, 4, 5))
#' weighted_median(c(1, 2, 3, 4, 5), weights = c(1, 2, 3, 4, 5))
#' weighted_median(c(1, 2, NA, 4, 5), na.rm = TRUE)
#'
#' @export
weighted_median <- function(x, weights = NULL, na.rm = FALSE) {
if (!is.numeric(x)) {
stop("Input 'x' must be a numeric vector.")
}
if (is.null(weights)) {
weights <- rep(1, length(x))
} else if (!is.numeric(weights) || length(weights) != length(x)) {
stop("Weights must be numeric and the same length as the input vector.")
}
if (na.rm) {
na_indices <- is.na(x) | is.na(weights)
x <- x[!na_indices]
weights <- weights[!na_indices]
} else if (any(is.na(x)) || any(is.na(weights))) {
return(NA)
}
if (length(x) == 0) return(NA)
# Sort x and weights
order <- order(x)
x <- x[order]
weights <- weights[order]
# Calculate cumulative weights
cum_weights <- cumsum(weights)
total_weight <- sum(weights)
if (total_weight == 0) return(NA)
# Find the weighted median
median_index <- which(cum_weights >= total_weight / 2)[1]
# Check if we need to interpolate
if (cum_weights[median_index] == total_weight / 2 && median_index < length(x)) {
return((x[median_index] + x[median_index + 1]) / 2)
} else {
return(x[median_index])
}
}
?weighted_median
document()
devtools::
devtools::document()
?weightedmedian
devtools::document()
?weightedmedian
?weighted_median
?weighted_median
devtools::document()
devtools::load_all()
?weighted_median
devtools::document()
devtools::load_all()
?weighted_median
devtools::load_all()
?weighted_median
devtools::document()
?weighted_median
# Install roxygen2 if you haven't already
# install.packages("roxygen2")
library(roxygen2)
library(testthat)
# Example 1: Basic usage
result1 <- weighted_median(c(1, 2, 3, 4, 5))
print(paste("Basic usage result:", result1))
# Example 2: With custom weights
result2 <- weighted_median(c(1, 2, 3, 4, 5), weights = c(5, 4, 3, 2, 1))
print(paste("Custom weights result:", result2))
# Example 3: Handling NA values
result3 <- weighted_median(c(1, 2, NA, 4, 5), na.rm = TRUE)
print(paste("NA handling result:", result3))
# Example 4: Demonstrating an error (uncomment to see the error)
weighted_median(c("a", "b", "c"),)
document()
devtools::install_github(...)
devtools::install_github(https://github.com/stat545ubc-2024/assignment-b2-Xpado-star)
library(devtools)
document()
rm(list = c("weighted_median"))
?weighted_median
usethis::use_readme_rmd()
devtools::build_readme()
usethis::use_mit_license()
devtools::check()
pkgbuild::check_build_tools(debug = TRUE)
devtools::check()
usethis::use_test("weighted_median")
devtools::test()
?weighted_median
devtools::build_readme()
